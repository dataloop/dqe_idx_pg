%% -*- erlang -*-

%% @doc The TCP endpoint for the backend server. Doesn't support hostnames.
%% This setting overwrites backend_host and backend_port connections.
{mapping, "idx.pg.$pool.backend", "dqe_idx_pg.pools",
  [{datatype, ip}]}.

%% @doc The TCP hostname or IP for the backend server.
%% Set this or backend_server.
{mapping, "idx.pg.$pool.backend_host", "dqe_idx_pg.pools",
 [{default, "127.0.0.1"},
  {datatype, string}]}.

%% @doc The TCP port for the backend server
%% Set this or backend_server.
{mapping, "idx.pg.$pool.backend_port", "dqe_idx_pg.pools",
 [{default, 5432},
  {datatype, integer}]}.

%% @doc Initial number of conneciton pool workers
{mapping, "idx.pg.$pool.size", "dqe_idx_pg.pools",
 [{default, 20},
  {datatype, integer}]}.

%% @doc Number of overflow connections - be careful with those!
{mapping, "idx.pg.$pool.max_overflow", "dqe_idx_pg.pools",
 [{default, 0},
  {datatype, integer}]}.

%% @doc Initial number of conneciton pool workers
{mapping, "idx.pg.$pool.database", "dqe_idx_pg.pools",
 [{default, "metric_metadata"},
  {datatype, string}]}.

%% @doc Username for the conection
{mapping, "idx.pg.$pool.username", "dqe_idx_pg.pools",
 [{default, "ddb"},
  {datatype, string}]}.

%% @doc Password for the conection
{mapping, "idx.pg.$pool.password", "dqe_idx_pg.pools",
 [{default, "ddb"},
  {datatype, string}]}.

%% @doc How long a pool worker should wait before timing out
{mapping, "idx.pg.timeout", "dqe_idx_pg.timeout",
 [{default, "5s"},
  {datatype, {duration, ms}}]}.

%% {translation,
%%  "dqe_idx_pg.pools",
%%  fun(Conf) ->
%%          %% TODO: work out how to to translate this now
%%          %% It is best to unit testing in:
%%          %%     https://github.com/basho/cuttlefish/wiki/Unit-Testing-A-Schema
%%          io:format("Trying out this funny config: ~p", [Conf]),
%%          UserList = lists:filter(
%%                       fun({K, _V}) ->
%%                               cuttlefish_variable:is_fuzzy_match(K, string:tokens("riak_control.user.$username.password", "."))
%%                       end,
%%                       Conf),
%%          Users = [ {Username, Password} || {[_, _, Username, _], Password} <- UserList ],
%%          case Users of
%%              [] ->
%%                  throw(unset);
%%              _ -> Users
%%          end
%%  end}.
